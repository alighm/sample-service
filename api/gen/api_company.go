/*
 * OpenAPI Go Reference Service
 *
 * This is a sample Go Reference
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CompanyAPIController binds http requests to an api service and writes the service results to the http response
type CompanyAPIController struct {
	service      CompanyAPIServicer
	errorHandler ErrorHandler
}

// CompanyAPIOption for how the controller is set up.
type CompanyAPIOption func(*CompanyAPIController)

// WithCompanyAPIErrorHandler inject ErrorHandler into controller
func WithCompanyAPIErrorHandler(h ErrorHandler) CompanyAPIOption {
	return func(c *CompanyAPIController) {
		c.errorHandler = h
	}
}

// NewCompanyAPIController creates a default api controller
func NewCompanyAPIController(s CompanyAPIServicer, opts ...CompanyAPIOption) Router {
	controller := &CompanyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CompanyAPIController
func (c *CompanyAPIController) Routes() Routes {
	return Routes{
		"AddCompany": Route{
			strings.ToUpper("Post"),
			"/companies",
			c.AddCompany,
		},
		"DeleteCompany": Route{
			strings.ToUpper("Delete"),
			"/companies/{companyId}",
			c.DeleteCompany,
		},
		"GetCompanies": Route{
			strings.ToUpper("Get"),
			"/companies",
			c.GetCompanies,
		},
		"GetCompany": Route{
			strings.ToUpper("Get"),
			"/companies/{companyId}",
			c.GetCompany,
		},
		"UpdateCompany": Route{
			strings.ToUpper("Put"),
			"/companies/{companyId}",
			c.UpdateCompany,
		},
	}
}

// AddCompany - Add a new company
func (c *CompanyAPIController) AddCompany(w http.ResponseWriter, r *http.Request) {
	xRequestIDParam := r.Header.Get("X-Request-ID")
	companyParam := Company{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&companyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCompanyRequired(companyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCompanyConstraints(companyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCompany(r.Context(), xRequestIDParam, companyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCompany - Deletes a company
func (c *CompanyAPIController) DeleteCompany(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	xRequestIDParam := r.Header.Get("X-Request-ID")
	companyIdParam := params["companyId"]
	if companyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"companyId"}, nil)
		return
	}
	result, err := c.service.DeleteCompany(r.Context(), xRequestIDParam, companyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCompanies - Get all companies
func (c *CompanyAPIController) GetCompanies(w http.ResponseWriter, r *http.Request) {
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.GetCompanies(r.Context(), xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCompany - Find company by ID
func (c *CompanyAPIController) GetCompany(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	xRequestIDParam := r.Header.Get("X-Request-ID")
	companyIdParam := params["companyId"]
	if companyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"companyId"}, nil)
		return
	}
	result, err := c.service.GetCompany(r.Context(), xRequestIDParam, companyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCompany - Updates a company
func (c *CompanyAPIController) UpdateCompany(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	xRequestIDParam := r.Header.Get("X-Request-ID")
	companyIdParam := params["companyId"]
	if companyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"companyId"}, nil)
		return
	}
	companyParam := Company{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&companyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCompanyRequired(companyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCompanyConstraints(companyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCompany(r.Context(), xRequestIDParam, companyIdParam, companyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
